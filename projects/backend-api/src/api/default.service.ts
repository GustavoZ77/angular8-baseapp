/**
 * Jalisco con empleo API
 * Aplicacion creada para conectar proovedores con clientes en Jalisco
 *
 * OpenAPI spec version: 1.0.0
 * Contact: soporte@amdocs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Categoria } from '../model/categoria';
import { Empleo } from '../model/empleo';
import { Skill } from '../model/skill';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'http://127.0.0.1:4010';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * muestra una categoria definida por el ID
     * @param categoryIdIn codigo de la categoria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categoriaCategoryIdInGet(categoryIdIn: number, observe?: 'body', reportProgress?: boolean): Observable<Categoria>;
    public categoriaCategoryIdInGet(categoryIdIn: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Categoria>>;
    public categoriaCategoryIdInGet(categoryIdIn: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Categoria>>;
    public categoriaCategoryIdInGet(categoryIdIn: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (categoryIdIn === null || categoryIdIn === undefined) {
            throw new Error('Required parameter categoryIdIn was null or undefined when calling categoriaCategoryIdInGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Categoria>('get',`${this.basePath}/Categoria/${encodeURIComponent(String(categoryIdIn))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * muestra todas las categorias en el catalogo de servicios
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categoriaGet(observe?: 'body', reportProgress?: boolean): Observable<Categoria>;
    public categoriaGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Categoria>>;
    public categoriaGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Categoria>>;
    public categoriaGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Categoria>('get',`${this.basePath}/Categoria`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * muestra un empleo definido por el ID
     * @param empleoIdIn codigo del empleo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public empleoEmpleoIdInGet(empleoIdIn: number, observe?: 'body', reportProgress?: boolean): Observable<Empleo>;
    public empleoEmpleoIdInGet(empleoIdIn: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empleo>>;
    public empleoEmpleoIdInGet(empleoIdIn: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empleo>>;
    public empleoEmpleoIdInGet(empleoIdIn: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (empleoIdIn === null || empleoIdIn === undefined) {
            throw new Error('Required parameter empleoIdIn was null or undefined when calling empleoEmpleoIdInGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Empleo>('get',`${this.basePath}/Empleo/${encodeURIComponent(String(empleoIdIn))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * muestra todos los Empleos
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public empleoGet(observe?: 'body', reportProgress?: boolean): Observable<Empleo>;
    public empleoGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empleo>>;
    public empleoGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empleo>>;
    public empleoGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Empleo>('get',`${this.basePath}/Empleo`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * muestra todos los skills
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public skillGet(observe?: 'body', reportProgress?: boolean): Observable<Skill>;
    public skillGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Skill>>;
    public skillGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Skill>>;
    public skillGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Skill>('get',`${this.basePath}/Skill`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * muestra un Skill definido por el ID
     * @param skillIdIn codigo del Skill
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public skillSkillIdInGet(skillIdIn: number, observe?: 'body', reportProgress?: boolean): Observable<Skill>;
    public skillSkillIdInGet(skillIdIn: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Skill>>;
    public skillSkillIdInGet(skillIdIn: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Skill>>;
    public skillSkillIdInGet(skillIdIn: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (skillIdIn === null || skillIdIn === undefined) {
            throw new Error('Required parameter skillIdIn was null or undefined when calling skillSkillIdInGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Skill>('get',`${this.basePath}/Skill/${encodeURIComponent(String(skillIdIn))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * muestar toodos los usuarios
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userGet(observe?: 'body', reportProgress?: boolean): Observable<User>;
    public userGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public userGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public userGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<User>('get',`${this.basePath}/User`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * crea un usuario
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userPost(body: User, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public userPost(body: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public userPost(body: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public userPost(body: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling userPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/User`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * muestre un Usuario definido por el ID
     * @param uniqueIdentifier codigo del usuario
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userUniqueIdentifierGet(uniqueIdentifier: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public userUniqueIdentifierGet(uniqueIdentifier: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public userUniqueIdentifierGet(uniqueIdentifier: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public userUniqueIdentifierGet(uniqueIdentifier: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uniqueIdentifier === null || uniqueIdentifier === undefined) {
            throw new Error('Required parameter uniqueIdentifier was null or undefined when calling userUniqueIdentifierGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<User>('get',`${this.basePath}/User/${encodeURIComponent(String(uniqueIdentifier))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
